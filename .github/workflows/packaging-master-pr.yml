# Unique name for this workflow
name: Packaging Master PR

# Workflow starts when receiving custom event sent by CI workflow
on:
    repository_dispatch:
        types: [package-master-pr-event]

# Jobs to be executed
jobs:
    packaging:
        runs-on: ubuntu-latest
        steps:
            # Install Salesforce CLI
            - name: Install Salesforce CLI
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
                  mkdir sfdx-cli
                  tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
                  ./sfdx-cli/install

            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: Authenticate Dev Hub
              run: sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Remove auth file
            - name: Remove auth file
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Create package version and extract its id
            - name: Create package version
              id: createPackageVersion
              run: |
                  set +e
                  json=$(sfdx force:package:version:create -p vf2lwc -x -w 20 -f config/project-scratch-def.json --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "::set-output name=packageVersionId::$packageVersionId"
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status

            # Wait for package replication
            - name: Wait for package replication
              uses: maddox/actions/sleep@master
              with:
                  args: 360

            # Create scratch org
            - name: Create scratch org
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

            # Install new package in scratch org
            - name: Install new package version in scratch org
              run: sfdx force:package:install -p ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -u scratch-org -r

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: 'sfdx force:org:delete -p -u scratch-org'
