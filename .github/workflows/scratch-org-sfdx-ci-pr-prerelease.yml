# Unique name for this workflow
name: Salesforce DX Prerelease (scratch org)

# Definition when the workflow should run
on:
    pull_request:
        types: [opened, edited, synchronize, reopened]
        branches:
            - prerelease/spring[2-9][0-9]
            - prerelease/summer[2-9][0-9]
            - prerelease/winter[2-9][0-9]

# Jobs to be executed
jobs:
    formatting-and-linting:
        runs-on: ubuntu-latest
        steps:
            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Cache node_modules to speed up the process
            - name: Restore node_modules cache
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm ci

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # Lint LWC
            - name: 'Lint Lightning Web Components'
              run: npm run lint:lwc

            # LWC unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

            # Upload code coverage data
            - name: 'Upload code coverage for LWC to Codecov.io'
              uses: codecov/codecov-action@v1
              with:
                  flags: LWC

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: formatting-and-linting
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: 'sudo npm install -g sfdx-cli'

            # Install salesforcedx pre-release plugin
            - name: 'Install salesforcedx pre-release plugin'
              run: 'sfdx plugins:install salesforcedx@pre-release'

            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_PREREL_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_PREREL_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: 'sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d'

            # Create scratch org
            - name: 'Create scratch org'
              run: 'sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1'

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: 'sfdx force:source:push'

            # Assign permissionset
            - name: 'Assign permissionset to default user'
              run: 'sfdx force:user:permset:assign -n Visualforce_to_LWC'

            # Import sample data
            - name: 'Import sample data'
              run: 'sfdx force:data:tree:import -p ./data/sample-data-plan.json'

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: 'sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20'

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v1
              with:
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: 'sfdx force:org:delete -p -u scratch-org'

    trigger-packaging:
        runs-on: ubuntu-latest
        needs: scratch-org-test
        steps:
            # Checkout the source code with history
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Check for package changes using git diff
            - name: Check for package changes
              id: checkForChanges
              run: |
                  git fetch origin $GITHUB_BASE_REF --depth=1
                  changedPaths=$( git diff-tree --name-only origin/$GITHUB_BASE_REF $GITHUB_SHA )
                  set +e
                  hasChanges='false'
                  if [ $(echo "$changedPaths" | grep -c '^force-app$') == 1 ]; then
                      hasChanges='true'
                  fi
                  echo "::set-output name=hasChanges::$hasChanges"

            # Trigger Packaging Prerelease PR workflow
            - name: 'Trigger Packaging Prerelease PR workflow if needed'
              uses: peter-evans/repository-dispatch@v1.1.0
              if: ${{ steps.checkForChanges.outputs.hasChanges == 'true' }}
              with:
                  token: ${{ secrets.BOT_ACCESS_TOKEN }}
                  event-type: package-prerelease-pr-event
                  client-payload: '{ "ref": "${{ github.ref }}", "sha": "${{ github.sha }}" }'
